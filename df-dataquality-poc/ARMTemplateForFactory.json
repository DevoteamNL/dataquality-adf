{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-dataquality-poc"
		},
		"AzureSqlDatabaseDataQ_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseDataQ'"
		},
		"AdlsDQ_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stdataquality01.dfs.core.windows.net/"
		},
		"AzureSqlDatabase-ep_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/41e50375-b926-4bc4-9045-348f359cf721/resourceGroups/pers-philip_mifsud-rg/providers/Microsoft.Sql/servers/dataq2-s"
		},
		"AzureSqlDatabase-ep_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"AzureSqlDatabase-ep_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"dataq2-s.database.windows.net"
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Rules",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select *\nfrom dbo.data_quality_rules\nwhere dataset_id =',string(pipeline().parameters.datasetID))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Dataset Info",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Rules",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(' select * from [dbo].[dataset_info] where dataset_id  = \n', activity('Get Rules').output.value[0].dataset_id)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Dataset Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "csv_source",
								"type": "DatasetReference",
								"parameters": {
									"domain": {
										"value": "@activity('Get Dataset Info').output.firstRow.domain",
										"type": "Expression"
									},
									"dataset_path": {
										"value": "@activity('Get Dataset Info').output.firstRow.location",
										"type": "Expression"
									},
									"file_name": "/"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@pipeline().parameters.startTime",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@pipeline().parameters.endTime",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Rules",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Rules').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append rule expr",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "rule_list",
										"value": {
											"value": "@item().rule_expression",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append col_names",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "col_names",
										"value": {
											"value": "@item().column_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append rule_names",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "rule_names",
										"value": {
											"value": "@item().rule_name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set total_rules",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "total_rules",
							"value": {
								"value": "@string(length(variables('rule_list')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set total_rules",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Switch File Type",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set file_name variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@activity('Get Dataset Info').output.firstRow.file_type",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "Data flow csv",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dataflow_csv",
																"type": "DataFlowReference",
																"parameters": {
																	"rule_list": {
																		"value": "@variables('rule_list')",
																		"type": "Expression"
																	},
																	"total_rules": {
																		"value": "@variables('total_rules')",
																		"type": "Expression"
																	},
																	"rule_names": {
																		"value": "@variables('rule_names')",
																		"type": "Expression"
																	},
																	"col_names": {
																		"value": "@variables('col_names')",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "'@{variables('file_name')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	},
																	"Results": {},
																	"FailedRecords": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"compute": {
																"coreCount": 8,
																"computeType": "General"
															},
															"traceLevel": "Fine"
														}
													}
												]
											},
											{
												"value": "parquet",
												"activities": [
													{
														"name": "Data flow parquet",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dataflow_parquet",
																"type": "DataFlowReference",
																"parameters": {
																	"rule_list": {
																		"value": "@variables('rule_list')",
																		"type": "Expression"
																	},
																	"total_rules": {
																		"value": "@variables('total_rules')",
																		"type": "Expression"
																	},
																	"rule_names": {
																		"value": "@variables('rule_names')",
																		"type": "Expression"
																	},
																	"col_names": {
																		"value": "@variables('col_names')",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "'@{variables('file_name')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	},
																	"Results": {},
																	"FailedRecords": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"compute": {
																"coreCount": 8,
																"computeType": "General"
															},
															"traceLevel": "Fine"
														}
													}
												]
											},
											{
												"value": "json",
												"activities": [
													{
														"name": "Data flow json",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dataflow_json",
																"type": "DataFlowReference",
																"parameters": {
																	"rule_list": {
																		"value": "@variables('rule_list')",
																		"type": "Expression"
																	},
																	"total_rules": {
																		"value": "@variables('total_rules')",
																		"type": "Expression"
																	},
																	"rule_names": {
																		"value": "@variables('rule_names')",
																		"type": "Expression"
																	},
																	"col_names": {
																		"value": "@variables('col_names')",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "'@{variables('file_name')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	},
																	"Results": {},
																	"FailedRecords": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"compute": {
																"coreCount": 8,
																"computeType": "General"
															},
															"traceLevel": "Fine"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "Please enter a valid file format",
													"errorCode": "001"
												}
											}
										]
									}
								},
								{
									"name": "Set file_name variable",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"datasetID": {
						"type": "int"
					},
					"startTime": {
						"type": "string",
						"defaultValue": "2/17/2023, 12:00:00 AM"
					},
					"endTime": {
						"type": "string",
						"defaultValue": "2/18/2023, 12:00:00 AM"
					}
				},
				"variables": {
					"rule_list": {
						"type": "Array"
					},
					"total_rules": {
						"type": "String"
					},
					"col_names": {
						"type": "Array"
					},
					"rule_names": {
						"type": "Array"
					},
					"file_name": {
						"type": "String"
					},
					"rule_expr": {
						"type": "String"
					},
					"broken_expr": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T14:22:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/csv_source')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_csv')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_parquet')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Dataset Info",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(' select * from [dbo].[dataset_info] where dataset_id  = \n', string(pipeline().parameters.datasetID))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Dataset Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "csv_source",
								"type": "DatasetReference",
								"parameters": {
									"domain": {
										"value": "@activity('Get Dataset Info').output.firstRow.domain",
										"type": "Expression"
									},
									"dataset_path": {
										"value": "@activity('Get Dataset Info').output.firstRow.location",
										"type": "Expression"
									},
									"file_name": "/"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@pipeline().parameters.startTime",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@pipeline().parameters.endTime",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set total_rules",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEachRule",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "total_rules",
							"value": {
								"value": "@string(length(variables('rule_list')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set total_rules",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Switch File Type",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set file_name variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@activity('Get Dataset Info').output.firstRow.file_type",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "csv",
												"activities": [
													{
														"name": "Data flow csv",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dataflow_csv",
																"type": "DataFlowReference",
																"parameters": {
																	"rule_list": {
																		"value": "@variables('rule_list')",
																		"type": "Expression"
																	},
																	"total_rules": {
																		"value": "@variables('total_rules')",
																		"type": "Expression"
																	},
																	"rule_names": {
																		"value": "@variables('rule_names')",
																		"type": "Expression"
																	},
																	"col_names": {
																		"value": "@variables('col_names')",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "'@{variables('file_name')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	},
																	"Results": {},
																	"FailedRecords": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": "@variables('file_name')"
																	}
																}
															},
															"staging": {},
															"compute": {
																"coreCount": 8,
																"computeType": "General"
															},
															"traceLevel": "Fine"
														}
													}
												]
											},
											{
												"value": "parquet",
												"activities": [
													{
														"name": "Data flow parquet",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dataflow_parquet",
																"type": "DataFlowReference",
																"parameters": {
																	"rule_list": {
																		"value": "@variables('rule_list')",
																		"type": "Expression"
																	},
																	"total_rules": {
																		"value": "@variables('total_rules')",
																		"type": "Expression"
																	},
																	"rule_names": {
																		"value": "@variables('rule_names')",
																		"type": "Expression"
																	},
																	"col_names": {
																		"value": "@variables('col_names')",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "'@{variables('file_name')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	},
																	"Results": {},
																	"FailedRecords": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": "@variables('file_name')"
																	}
																}
															},
															"staging": {},
															"compute": {
																"coreCount": 8,
																"computeType": "General"
															},
															"traceLevel": "Fine"
														}
													}
												]
											},
											{
												"value": "json",
												"activities": [
													{
														"name": "Data flow json",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dataflow_json",
																"type": "DataFlowReference",
																"parameters": {
																	"rule_list": {
																		"value": "@variables('rule_list')",
																		"type": "Expression"
																	},
																	"total_rules": {
																		"value": "@variables('total_rules')",
																		"type": "Expression"
																	},
																	"rule_names": {
																		"value": "@variables('rule_names')",
																		"type": "Expression"
																	},
																	"col_names": {
																		"value": "@variables('col_names')",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "'@{variables('file_name')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": {
																			"value": "@variables('file_name')",
																			"type": "Expression"
																		}
																	},
																	"Results": {},
																	"FailedRecords": {
																		"domain": "@activity('Get Dataset Info').output.firstRow.domain",
																		"dataset_path": "@activity('Get Dataset Info').output.firstRow.location",
																		"file_name": "@variables('file_name')"
																	}
																}
															},
															"staging": {},
															"compute": {
																"coreCount": 8,
																"computeType": "General"
															},
															"traceLevel": "Fine"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "Please enter a valid file format",
													"errorCode": "001"
												}
											}
										]
									}
								},
								{
									"name": "Set file_name variable",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ForEachRule",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get User Input",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Dataset Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get user input').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get rule template",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select *\nfrom dbo.data_quality_rules_new\nwhere rule_id =',string(item().rule_id))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Compose rules",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Get rule template",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@string(activity('Get rule template').output.firstRow.num_params)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "1",
												"activities": [
													{
														"name": "Rules with 1 param",
														"type": "SetVariable",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"variableName": "rule_expr",
															"value": {
																"value": "@concat(split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[0], item().column_name, split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[1], split(string(item().extra_params), ',')[0], split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[2])",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "2",
												"activities": [
													{
														"name": "Rules with 2 params",
														"type": "SetVariable",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"variableName": "rule_expr",
															"value": {
																"value": "@concat(split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[0], item().column_name, split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[1], split(string(item().extra_params), ',')[0], split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[2], split(string(item().extra_params), ',')[1], split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[3])",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Rules no param",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "rule_expr",
													"value": {
														"value": "@concat(split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[0], item().column_name, split(string(activity('Get rule template').output.firstRow.rule_expression), '{}')[1])",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Append to rule list",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Compose rules",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "rule_list",
										"value": {
											"value": "@variables('rule_expr')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append column names",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "col_names",
										"value": {
											"value": "@item().column_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append rule names",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "rule_names",
										"value": {
											"value": "@item().applied_rule_name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get User Input",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select *\nfrom dbo.data_quality_user_input\nwhere dataset_id =',string(pipeline().parameters.datasetID))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"datasetID": {
						"type": "int"
					},
					"startTime": {
						"type": "string",
						"defaultValue": "2/17/2023, 12:00:00 AM"
					},
					"endTime": {
						"type": "string",
						"defaultValue": "2/18/2023, 12:00:00 AM"
					}
				},
				"variables": {
					"rule_list": {
						"type": "Array"
					},
					"total_rules": {
						"type": "String"
					},
					"col_names": {
						"type": "Array"
					},
					"rule_names": {
						"type": "Array"
					},
					"file_name": {
						"type": "String"
					},
					"rule_expr": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T14:22:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/csv_source')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_csv')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_parquet')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDataQ",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DATA_QUALITY_RULE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RULE_NAME",
						"type": "varchar"
					},
					{
						"name": "RULE_DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "RULE_TYPE_CODE",
						"type": "varchar"
					},
					{
						"name": "RULE_LEVEL_CODE",
						"type": "varchar"
					},
					{
						"name": "RULE_SCRIPT_TYPE_CODE",
						"type": "varchar"
					},
					{
						"name": "RULE_SCRIPT_TEXT",
						"type": "varchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDataQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdlsDQ",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"domain": {
						"type": "String"
					},
					"dataset_path": {
						"type": "String"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dataset_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().domain",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdlsDQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_quality_rule_results')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDataQ",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "total_record",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "rule_name",
						"type": "varchar"
					},
					{
						"name": "failed_record",
						"type": "int",
						"precision": 10
					},
					{
						"name": "file_name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "data_quality_rule_results"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDataQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/failed_records')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdlsDQ",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"domain": {
						"type": "string"
					},
					"dataset_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('results', '/', dataset().dataset_path, '/', dataset().file_name)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().domain",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdlsDQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/json_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdlsDQ",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"domain": {
						"type": "string"
					},
					"dataset_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dataset_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().domain",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdlsDQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdlsDQ",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"domain": {
						"type": "string"
					},
					"dataset_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dataset_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().domain",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdlsDQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdlsDQ')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AdlsDQ_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDataQ')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseDataQ_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_csv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csv_source",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "data_quality_rule_results",
								"type": "DatasetReference"
							},
							"name": "Results"
						},
						{
							"dataset": {
								"referenceName": "failed_records",
								"type": "DatasetReference"
							},
							"name": "FailedRecords"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "aggregate"
						},
						{
							"name": "filterFailedRecords"
						},
						{
							"name": "unpivot"
						},
						{
							"name": "addFileNameandTS"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     rule_list as string[],",
						"     total_rules as integer,",
						"     rule_names as string[],",
						"     col_names as string[],",
						"     file_name as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source",
						"source derive(each(match(iif(1<=$total_rules,equalsIgnoreCase(name,$col_names[1]),false())), $rule_names[1] = expr(expr('iif(1<=$total_rules, $rule_list[1], toString(false()))'))),",
						"          each(match(iif(2<=$total_rules,equalsIgnoreCase(name,$col_names[2]),false())), $rule_names[2] = expr(expr('iif(2<=$total_rules, $rule_list[2], toString(false()))'))),",
						"          each(match(iif(3<=$total_rules,equalsIgnoreCase(name,$col_names[3]),false())), $rule_names[3] = expr(expr('iif(3<=$total_rules, $rule_list[3], toString(false()))'))),",
						"          each(match(iif(4<=$total_rules,equalsIgnoreCase(name,$col_names[4]),false())), $rule_names[4] = expr(expr('iif(4<=$total_rules, $rule_list[4], toString(false()))'))),",
						"          each(match(iif(5<=$total_rules,equalsIgnoreCase(name,$col_names[5]),false())), $rule_names[5] = expr(expr('iif(5<=$total_rules, $rule_list[5], toString(false()))'))),",
						"          each(match(iif(6<=$total_rules,equalsIgnoreCase(name,$col_names[6]),false())), $rule_names[6] = expr(expr('iif(6<=$total_rules, $rule_list[6], toString(false()))'))),",
						"          each(match(iif(7<=$total_rules,equalsIgnoreCase(name,$col_names[7]),false())), $rule_names[7] = expr(expr('iif(7<=$total_rules, $rule_list[7], toString(false()))'))),",
						"          each(match(iif(8<=$total_rules,equalsIgnoreCase(name,$col_names[8]),false())), $rule_names[8] = expr(expr('iif(8<=$total_rules, $rule_list[8], toString(false()))'))),",
						"          each(match(iif(9<=$total_rules,equalsIgnoreCase(name,$col_names[9]),false())), $rule_names[9] = expr(expr('iif(9<=$total_rules, $rule_list[9], toString(false()))'))),",
						"          each(match(iif(10<=$total_rules,equalsIgnoreCase(name,$col_names[10]),false())), $rule_names[10] = expr(expr('iif(10<=$total_rules, $rule_list[10], toString(false()))'))),",
						"          each(match(iif(11<=$total_rules,equalsIgnoreCase(name,$col_names[11]),false())), $rule_names[11] = expr(expr('iif(11<=$total_rules, $rule_list[11], toString(false()))'))),",
						"          each(match(iif(12<=$total_rules,equalsIgnoreCase(name,$col_names[12]),false())), $rule_names[12] = expr(expr('iif(12<=$total_rules, $rule_list[12], toString(false()))'))),",
						"          each(match(iif(13<=$total_rules,equalsIgnoreCase(name,$col_names[13]),false())), $rule_names[13] = expr(expr('iif(13<=$total_rules, $rule_list[13], toString(false()))'))),",
						"          each(match(iif(14<=$total_rules,equalsIgnoreCase(name,$col_names[14]),false())), $rule_names[14] = expr(expr('iif(14<=$total_rules, $rule_list[14], toString(false()))'))),",
						"          each(match(iif(15<=$total_rules,equalsIgnoreCase(name,$col_names[15]),false())), $rule_names[15] = expr(expr('iif(15<=$total_rules, $rule_list[15], toString(false()))'))),",
						"          each(match(iif(16<=$total_rules,equalsIgnoreCase(name,$col_names[16]),false())), $rule_names[16] = expr(expr('iif(16<=$total_rules, $rule_list[16], toString(false()))'))),",
						"          each(match(iif(17<=$total_rules,equalsIgnoreCase(name,$col_names[17]),false())), $rule_names[17] = expr(expr('iif(17<=$total_rules, $rule_list[17], toString(false()))'))),",
						"          each(match(iif(18<=$total_rules,equalsIgnoreCase(name,$col_names[18]),false())), $rule_names[18] = expr(expr('iif(18<=$total_rules, $rule_list[18], toString(false()))'))),",
						"          each(match(iif(19<=$total_rules,equalsIgnoreCase(name,$col_names[19]),false())), $rule_names[19] = expr(expr('iif(19<=$total_rules, $rule_list[19], toString(false()))'))),",
						"          each(match(iif(20<=$total_rules,equalsIgnoreCase(name,$col_names[20]),false())), $rule_names[20] = expr(expr('iif(20<=$total_rules, $rule_list[20], toString(false()))')))) ~> derivedColumn",
						"derivedColumn aggregate(total_records = count($rule_names[1]),",
						"          each(match(name==$rule_names[1]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[2]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[3]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[4]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[5]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[6]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[7]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[8]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[9]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[10]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[11]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[12]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[13]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[14]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[15]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[16]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[17]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[18]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[19]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[20]), $$ = toInteger(sum(toInteger($$))))) ~> aggregate",
						"derivedColumn filter(toInteger(byName($rule_names[1]))==1 || toInteger(byName($rule_names[2]))==1 || toInteger(byName($rule_names[3]))==1 || toInteger(byName($rule_names[4]))==1 || toInteger(byName($rule_names[5]))==1 || toInteger(byName($rule_names[6]))==1 || toInteger(byName($rule_names[7]))==1 || toInteger(byName($rule_names[8]))==1 || toInteger(byName($rule_names[9]))==1 || toInteger(byName($rule_names[10]))==1) ~> filterFailedRecords",
						"aggregate unpivot(output(",
						"          rule_name as string,",
						"          failed_records as integer",
						"     ),",
						"     ungroupBy(total_records),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivot",
						"unpivot derive(file_name = $file_name,",
						"          insert_ts = currentTimestamp()) ~> addFileNameandTS",
						"addFileNameandTS alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          total_record as long,",
						"          rule_name as string,",
						"          failed_record as integer,",
						"          file_name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['rule_name','file_name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     preCommands: [],",
						"     postCommands: []) ~> Results",
						"filterFailedRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string",
						"     ),",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FailedRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_source')]",
				"[concat(variables('factoryId'), '/datasets/data_quality_rule_results')]",
				"[concat(variables('factoryId'), '/datasets/failed_records')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "json_source",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "data_quality_rule_results",
								"type": "DatasetReference"
							},
							"name": "Results"
						},
						{
							"dataset": {
								"referenceName": "failed_records",
								"type": "DatasetReference"
							},
							"name": "FailedRecords"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "aggregate"
						},
						{
							"name": "filterFailedRecords"
						},
						{
							"name": "unpivot"
						},
						{
							"name": "addFileNameandTS"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     rule_list as string[],",
						"     total_rules as integer,",
						"     rule_names as string[],",
						"     col_names as string[],",
						"     file_name as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source",
						"source derive(each(match(iif(1<=$total_rules,equalsIgnoreCase(name,$col_names[1]),false())), $rule_names[1] = expr(expr('iif(1<=$total_rules, $rule_list[1], toString(false()))'))),",
						"          each(match(iif(2<=$total_rules,equalsIgnoreCase(name,$col_names[2]),false())), $rule_names[2] = expr(expr('iif(2<=$total_rules, $rule_list[2], toString(false()))'))),",
						"          each(match(iif(3<=$total_rules,equalsIgnoreCase(name,$col_names[3]),false())), $rule_names[3] = expr(expr('iif(3<=$total_rules, $rule_list[3], toString(false()))'))),",
						"          each(match(iif(4<=$total_rules,equalsIgnoreCase(name,$col_names[4]),false())), $rule_names[4] = expr(expr('iif(4<=$total_rules, $rule_list[4], toString(false()))'))),",
						"          each(match(iif(5<=$total_rules,equalsIgnoreCase(name,$col_names[5]),false())), $rule_names[5] = expr(expr('iif(5<=$total_rules, $rule_list[5], toString(false()))'))),",
						"          each(match(iif(6<=$total_rules,equalsIgnoreCase(name,$col_names[6]),false())), $rule_names[6] = expr(expr('iif(6<=$total_rules, $rule_list[6], toString(false()))'))),",
						"          each(match(iif(7<=$total_rules,equalsIgnoreCase(name,$col_names[7]),false())), $rule_names[7] = expr(expr('iif(7<=$total_rules, $rule_list[7], toString(false()))'))),",
						"          each(match(iif(8<=$total_rules,equalsIgnoreCase(name,$col_names[8]),false())), $rule_names[8] = expr(expr('iif(8<=$total_rules, $rule_list[8], toString(false()))'))),",
						"          each(match(iif(9<=$total_rules,equalsIgnoreCase(name,$col_names[9]),false())), $rule_names[9] = expr(expr('iif(9<=$total_rules, $rule_list[9], toString(false()))'))),",
						"          each(match(iif(10<=$total_rules,equalsIgnoreCase(name,$col_names[10]),false())), $rule_names[10] = expr(expr('iif(10<=$total_rules, $rule_list[10], toString(false()))'))),",
						"          each(match(iif(11<=$total_rules,equalsIgnoreCase(name,$col_names[11]),false())), $rule_names[11] = expr(expr('iif(11<=$total_rules, $rule_list[11], toString(false()))'))),",
						"          each(match(iif(12<=$total_rules,equalsIgnoreCase(name,$col_names[12]),false())), $rule_names[12] = expr(expr('iif(12<=$total_rules, $rule_list[12], toString(false()))'))),",
						"          each(match(iif(13<=$total_rules,equalsIgnoreCase(name,$col_names[13]),false())), $rule_names[13] = expr(expr('iif(13<=$total_rules, $rule_list[13], toString(false()))'))),",
						"          each(match(iif(14<=$total_rules,equalsIgnoreCase(name,$col_names[14]),false())), $rule_names[14] = expr(expr('iif(14<=$total_rules, $rule_list[14], toString(false()))'))),",
						"          each(match(iif(15<=$total_rules,equalsIgnoreCase(name,$col_names[15]),false())), $rule_names[15] = expr(expr('iif(15<=$total_rules, $rule_list[15], toString(false()))'))),",
						"          each(match(iif(16<=$total_rules,equalsIgnoreCase(name,$col_names[16]),false())), $rule_names[16] = expr(expr('iif(16<=$total_rules, $rule_list[16], toString(false()))'))),",
						"          each(match(iif(17<=$total_rules,equalsIgnoreCase(name,$col_names[17]),false())), $rule_names[17] = expr(expr('iif(17<=$total_rules, $rule_list[17], toString(false()))'))),",
						"          each(match(iif(18<=$total_rules,equalsIgnoreCase(name,$col_names[18]),false())), $rule_names[18] = expr(expr('iif(18<=$total_rules, $rule_list[18], toString(false()))'))),",
						"          each(match(iif(19<=$total_rules,equalsIgnoreCase(name,$col_names[19]),false())), $rule_names[19] = expr(expr('iif(19<=$total_rules, $rule_list[19], toString(false()))'))),",
						"          each(match(iif(20<=$total_rules,equalsIgnoreCase(name,$col_names[20]),false())), $rule_names[20] = expr(expr('iif(20<=$total_rules, $rule_list[20], toString(false()))')))) ~> derivedColumn",
						"derivedColumn aggregate(total_records = count($rule_names[1]),",
						"          each(match(name==$rule_names[1]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[2]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[3]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[4]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[5]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[6]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[7]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[8]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[9]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[10]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[11]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[12]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[13]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[14]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[15]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[16]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[17]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[18]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[19]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[20]), $$ = toInteger(sum(toInteger($$))))) ~> aggregate",
						"derivedColumn filter(toInteger(byName($rule_names[1]))==1 || toInteger(byName($rule_names[2]))==1 || toInteger(byName($rule_names[3]))==1 || toInteger(byName($rule_names[4]))==1 || toInteger(byName($rule_names[5]))==1 || toInteger(byName($rule_names[6]))==1 || toInteger(byName($rule_names[7]))==1 || toInteger(byName($rule_names[8]))==1 || toInteger(byName($rule_names[9]))==1 || toInteger(byName($rule_names[10]))==1) ~> filterFailedRecords",
						"aggregate unpivot(output(",
						"          rule_name as string,",
						"          failed_records as integer",
						"     ),",
						"     ungroupBy(total_records),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivot",
						"unpivot derive(file_name = $file_name,",
						"          insert_ts = currentTimestamp()) ~> addFileNameandTS",
						"addFileNameandTS alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          total_record as long,",
						"          rule_name as string,",
						"          failed_record as integer,",
						"          file_name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['rule_name','file_name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     preCommands: [],",
						"     postCommands: []) ~> Results",
						"filterFailedRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FailedRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/json_source')]",
				"[concat(variables('factoryId'), '/datasets/data_quality_rule_results')]",
				"[concat(variables('factoryId'), '/datasets/failed_records')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "parquet_source",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "data_quality_rule_results",
								"type": "DatasetReference"
							},
							"name": "Results"
						},
						{
							"dataset": {
								"referenceName": "failed_records",
								"type": "DatasetReference"
							},
							"name": "FailedRecords"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "aggregate"
						},
						{
							"name": "filterFailedRecords"
						},
						{
							"name": "unpivot"
						},
						{
							"name": "addFileNameandTS"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     rule_list as string[],",
						"     total_rules as integer,",
						"     rule_names as string[],",
						"     col_names as string[],",
						"     file_name as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(each(match(iif(1<=$total_rules,equalsIgnoreCase(name,$col_names[1]),false())), $rule_names[1] = expr(expr('iif(1<=$total_rules, $rule_list[1], toString(false()))'))),",
						"          each(match(iif(2<=$total_rules,equalsIgnoreCase(name,$col_names[2]),false())), $rule_names[2] = expr(expr('iif(2<=$total_rules, $rule_list[2], toString(false()))'))),",
						"          each(match(iif(3<=$total_rules,equalsIgnoreCase(name,$col_names[3]),false())), $rule_names[3] = expr(expr('iif(3<=$total_rules, $rule_list[3], toString(false()))'))),",
						"          each(match(iif(4<=$total_rules,equalsIgnoreCase(name,$col_names[4]),false())), $rule_names[4] = expr(expr('iif(4<=$total_rules, $rule_list[4], toString(false()))'))),",
						"          each(match(iif(5<=$total_rules,equalsIgnoreCase(name,$col_names[5]),false())), $rule_names[5] = expr(expr('iif(5<=$total_rules, $rule_list[5], toString(false()))'))),",
						"          each(match(iif(6<=$total_rules,equalsIgnoreCase(name,$col_names[6]),false())), $rule_names[6] = expr(expr('iif(6<=$total_rules, $rule_list[6], toString(false()))'))),",
						"          each(match(iif(7<=$total_rules,equalsIgnoreCase(name,$col_names[7]),false())), $rule_names[7] = expr(expr('iif(7<=$total_rules, $rule_list[7], toString(false()))'))),",
						"          each(match(iif(8<=$total_rules,equalsIgnoreCase(name,$col_names[8]),false())), $rule_names[8] = expr(expr('iif(8<=$total_rules, $rule_list[8], toString(false()))'))),",
						"          each(match(iif(9<=$total_rules,equalsIgnoreCase(name,$col_names[9]),false())), $rule_names[9] = expr(expr('iif(9<=$total_rules, $rule_list[9], toString(false()))'))),",
						"          each(match(iif(10<=$total_rules,equalsIgnoreCase(name,$col_names[10]),false())), $rule_names[10] = expr(expr('iif(10<=$total_rules, $rule_list[10], toString(false()))'))),",
						"          each(match(iif(11<=$total_rules,equalsIgnoreCase(name,$col_names[11]),false())), $rule_names[11] = expr(expr('iif(11<=$total_rules, $rule_list[11], toString(false()))'))),",
						"          each(match(iif(12<=$total_rules,equalsIgnoreCase(name,$col_names[12]),false())), $rule_names[12] = expr(expr('iif(12<=$total_rules, $rule_list[12], toString(false()))'))),",
						"          each(match(iif(13<=$total_rules,equalsIgnoreCase(name,$col_names[13]),false())), $rule_names[13] = expr(expr('iif(13<=$total_rules, $rule_list[13], toString(false()))'))),",
						"          each(match(iif(14<=$total_rules,equalsIgnoreCase(name,$col_names[14]),false())), $rule_names[14] = expr(expr('iif(14<=$total_rules, $rule_list[14], toString(false()))'))),",
						"          each(match(iif(15<=$total_rules,equalsIgnoreCase(name,$col_names[15]),false())), $rule_names[15] = expr(expr('iif(15<=$total_rules, $rule_list[15], toString(false()))'))),",
						"          each(match(iif(16<=$total_rules,equalsIgnoreCase(name,$col_names[16]),false())), $rule_names[16] = expr(expr('iif(16<=$total_rules, $rule_list[16], toString(false()))'))),",
						"          each(match(iif(17<=$total_rules,equalsIgnoreCase(name,$col_names[17]),false())), $rule_names[17] = expr(expr('iif(17<=$total_rules, $rule_list[17], toString(false()))'))),",
						"          each(match(iif(18<=$total_rules,equalsIgnoreCase(name,$col_names[18]),false())), $rule_names[18] = expr(expr('iif(18<=$total_rules, $rule_list[18], toString(false()))'))),",
						"          each(match(iif(19<=$total_rules,equalsIgnoreCase(name,$col_names[19]),false())), $rule_names[19] = expr(expr('iif(19<=$total_rules, $rule_list[19], toString(false()))'))),",
						"          each(match(iif(20<=$total_rules,equalsIgnoreCase(name,$col_names[20]),false())), $rule_names[20] = expr(expr('iif(20<=$total_rules, $rule_list[20], toString(false()))')))) ~> derivedColumn",
						"derivedColumn aggregate(total_records = count($rule_names[1]),",
						"          each(match(name==$rule_names[1]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[2]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[3]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[4]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[5]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[6]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[7]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[8]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[9]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[10]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[11]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[12]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[13]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[14]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[15]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[16]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[17]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[18]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[19]), $$ = toInteger(sum(toInteger($$)))),",
						"          each(match(name==$rule_names[20]), $$ = toInteger(sum(toInteger($$))))) ~> aggregate",
						"derivedColumn filter(toInteger(byName($rule_names[1]))==1 || toInteger(byName($rule_names[2]))==1 || toInteger(byName($rule_names[3]))==1 || toInteger(byName($rule_names[4]))==1 || toInteger(byName($rule_names[5]))==1 || toInteger(byName($rule_names[6]))==1 || toInteger(byName($rule_names[7]))==1 || toInteger(byName($rule_names[8]))==1 || toInteger(byName($rule_names[9]))==1 || toInteger(byName($rule_names[10]))==1) ~> filterFailedRecords",
						"aggregate unpivot(output(",
						"          rule_name as string,",
						"          failed_records as integer",
						"     ),",
						"     ungroupBy(total_records),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivot",
						"unpivot derive(file_name = $file_name,",
						"          insert_ts = currentTimestamp()) ~> addFileNameandTS",
						"addFileNameandTS alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          total_record as long,",
						"          rule_name as string,",
						"          failed_record as integer,",
						"          file_name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['rule_name','file_name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     preCommands: [],",
						"     postCommands: []) ~> Results",
						"filterFailedRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FailedRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parquet_source')]",
				"[concat(variables('factoryId'), '/datasets/data_quality_rule_results')]",
				"[concat(variables('factoryId'), '/datasets/failed_records')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlDatabase-ep')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlDatabase-ep_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlDatabase-ep_properties_groupId')]",
				"fqdns": "[parameters('AzureSqlDatabase-ep_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}